* Roads
Each road sprite starts at the middle of the tile and goes out to a compass direction. This means you could have at most 8 roads in a tile that intersect in the middle of the tile.

Road spite info is defined in terms of which compass point the road leaves the tile at. So "N" would mean a road sprite that starts in the middle of the tile and exits at the north of the tile.

When placing a road on a tile you will have at least 2 exit points for that tile. You can place multiple road tiles to make this happen.

I want to connect the cities in the map by roads. The roads variable contains the sprites and the roadsInfo contains the info about the sprite. Each road tile is 206W x 102H.

Write a function to create these connections between cities and add the correct road sprite for each tile that is used.

There should only be one road between cities, though multiple roads can terminate at a single city.

My algorithm is to build the roads as the cities are placed. So when the 2nd city is placed, we connect it to the first city. When the 3rd city is placed it connects to the nearest city or road. Same with the 4th and so on.

As you're placing roads remember that roads can be placed in any adjacent direction (compass directions) not just the ordinal directions (up/down/left/right).



** Road refinement - prefer existing paths
There are too many parallel roads. The BFS algorithm should prefer to use existing tiles that have roads on them already, even if the path is longer
** Road refinement - diagonals
Roads can also be diagonal. Find paths that include diagonals.
** Road refinement - turns
A turn can be made by combining 2 road sprites together. For example if you are on a diagonal entering from the SE part of the tile, you can combine SE,NW with E,W to make a turn to the East.

* Cities
With level.go, game.go and tile.go

When generating levels, also mark some squares as cities. These cities should be at least 4 tiles away from each other and there should be 35 cities on the map.

Cities cannot be places on water tiles, but can be on any other tile.
* Enemies
Generate some enemies that move randomly throughout the map. They should appear in the players view and move towards the player

1. Add AI movement to enemies that makes them move randomly when the player is out of view range
2. Make enemies move toward the player when they're within view range
3. Add a system to spawn enemies at random positions on the map
4. Update the game to render enemies and manage their movement
5. Add the ability to spawn more enemies with the 'Q' key

* Direction
Instead of representing direction like this:

	up := ebiten.IsKeyPressed(ebiten.KeyUp) || ebiten.IsKeyPressed(ebiten.KeyW)
	down := ebiten.IsKeyPressed(ebiten.KeyDown) || ebiten.IsKeyPressed(ebiten.KeyS)
	left := ebiten.IsKeyPressed(ebiten.KeyLeft) || ebiten.IsKeyPressed(ebiten.KeyA)
	right := ebiten.IsKeyPressed(ebiten.KeyRight) || ebiten.IsKeyPressed(ebiten.KeyD)


I want to represent it as an int with bits

Examples:

Up: 1000 = 8
Down: 0100 = 4
Left: 0010 = 2
Right: 0001 = 1

UpLeft: 1100 = 12
