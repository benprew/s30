* General
I'm building a 2d isometric game based on the collectible card game Magic: The Gathering.

* City/Village Screen
In the world map, a character can walk around and walk into a city or a village. When a character walks into a city or village it should open the City/Village image (behind the world frame) which you exit by pressing the escape key. Leaving takes you back to the world map.

The hit detection for walking into a city/village should be the character is on the tile with the city/village.

The City image is assets/art/sprites/world/City.png
The Village image is assets/art/sprites/world/Village.png

Add them to the embed.go file in art/

* Rules Engine
I'd like to build a rules engine for mtg that can be used to play the game. The engine should be able to handle the rules of the game, including card interactions, combat, and mana generation.
How can I break this down into smaller tasks?

** tasks
1. Define the Card Model: Create a data structure to represent MTG cards, including attributes like name, mana cost, colors, card type, abilities, and power/toughness (if applicable).
2. Implement Mana System: Develop a system for managing mana pools, including mana generation, mana costs, and mana abilities.
3. Implement Turn Structure: Define the phases of a turn (untap, upkeep, draw, main, combat, main, end) and the actions that can be taken during each phase.
4. Implement Card Abilities: Implement the logic for different card abilities, such as triggered abilities, activated abilities, and static abilities.
5. Implement Combat System: Develop a system for handling combat, including declaring attackers and blockers, assigning damage, and resolving combat damage.
6. Implement Game State Management: Create a system for tracking the game state, including life totals, card positions (library, hand, battlefield, graveyard, exile), and other relevant information.
7. Implement Card Interactions: Implement the logic for card interactions, such as spells that target other cards, abilities that modify other cards, and effects that counter spells.
8. Implement Winning/Losing Conditions: Define the conditions for winning or losing the game, such as reducing an opponent's life total to zero or running out of cards in the library.
9. Create a Card Database: Create a database of MTG cards that can be used by the engine.
10, Implement a User Interface (Optional): Create a user interface for interacting with the engine, such as a command-line interface or a graphical user interface.


** generic prompts
write a function called PlayGame that keeps calling NextTurn until only 1 player hasn't lost.

* Roads
Each road sprite starts at the middle of the tile and goes out to a compass direction. This means you could have at most 8 roads in a tile that intersect in the middle of the tile.

Road spite info is defined in terms of which compass point the road leaves the tile at. So "N" would mean a road sprite that starts in the middle of the tile and exits at the north of the tile.

When placing a road on a tile you will have at least 2 exit points for that tile. You can place multiple road tiles to make this happen.

I want to connect the cities in the map by roads. The roads variable contains the sprites and the roadsInfo contains the info about the sprite. Each road tile is 206W x 102H.

Write a function to create these connections between cities and add the correct road sprite for each tile that is used.

There should only be one road between cities, though multiple roads can terminate at a single city.

My algorithm is to build the roads as the cities are placed. So when the 2nd city is placed, we connect it to the first city. When the 3rd city is placed it connects to the nearest city or road. Same with the 4th and so on.

As you're placing roads remember that roads can be placed in any adjacent direction (compass directions) not just the ordinal directions (up/down/left/right).



** Road refinement - prefer existing paths
There are too many parallel roads. The BFS algorithm should prefer to use existing tiles that have roads on them already, even if the path is longer
** Road refinement - diagonals
Roads can also be diagonal. Find paths that include diagonals.
** Road refinement - turns
A turn can be made by combining 2 road sprites together. For example if you are on a diagonal entering from the SE part of the tile, you can combine SE,NW with E,W to make a turn to the East.

* Cities
With level.go, game.go and tile.go

When generating levels, also mark some squares as cities. These cities should be at least 4 tiles away from each other and there should be 35 cities on the map.

Cities cannot be places on water tiles, but can be on any other tile.
* Enemies
Generate some enemies that move randomly throughout the map. They should appear in the players view and move towards the player

1. Add AI movement to enemies that makes them move randomly when the player is out of view range
2. Make enemies move toward the player when they're within view range
3. Add a system to spawn enemies at random positions on the map
4. Update the game to render enemies and manage their movement
5. Add the ability to spawn more enemies with the 'Q' key

* Direction
Instead of representing direction like this:

        up := ebiten.IsKeyPressed(ebiten.KeyUp) || ebiten.IsKeyPressed(ebiten.KeyW)
        down := ebiten.IsKeyPressed(ebiten.KeyDown) || ebiten.IsKeyPressed(ebiten.KeyS)
        left := ebiten.IsKeyPressed(ebiten.KeyLeft) || ebiten.IsKeyPressed(ebiten.KeyA)
        right := ebiten.IsKeyPressed(ebiten.KeyRight) || ebiten.IsKeyPressed(ebiten.KeyD)


I want to represent it as an int with bits

Examples:

Up: 1000 = 8
Down: 0100 = 4
Left: 0010 = 2
Right: 0001 = 1

UpLeft: 1100 = 12
